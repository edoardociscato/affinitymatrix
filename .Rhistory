# Size of the problem
Kx = 4; Ky = 5; N = 500
# Generate data
mu = rep(0, Kx+Ky)
Sigma = matrix(runif((Kx+Ky)^2, min=-.2, max=.2), nrow=Kx+Ky)
Sigma = t(Sigma)%*%Sigma; diag(Sigma) = 1
data = MASS::mvrnorm(N, mu, Sigma)
X = data[,1:Kx]; Y = data[,Kx+1:Ky] # men's and women's sample data
w = sort(runif(N-1)); w = c(w,1) - c(0,w) # sample weights
# Main estimation
res = estimate.affinity.matrix.lowrank(X, Y, w = w, tol_level = 1e-02, nB = 500, Nfolds = 3)
document()
# Size of the problem
Kx = 4; Ky = 5; N = 500
# Generate data
mu = rep(0, Kx+Ky)
Sigma = matrix(runif((Kx+Ky)^2, min=-.2, max=.2), nrow=Kx+Ky)
Sigma = t(Sigma)%*%Sigma; diag(Sigma) = 1
data = MASS::mvrnorm(N, mu, Sigma)
X = data[,1:Kx]; Y = data[,Kx+1:Ky] # men's and women's sample data
w = sort(runif(N-1)); w = c(w,1) - c(0,w) # sample weights
# Main estimation
res = estimate.affinity.matrix.lowrank(X, Y, w = w, tol_level = 1e-02, nB = 500, Nfolds = 3)
res = estimate.affinity.matrix.lowrank(X, Y, w = w, tol_level = 1e-02, nB = 500, Nfolds = 3, manual_lambda = .1)
res = estimate.affinity.matrix.lowrank(X, Y, w = w, tol_level = 1e-02, nB = 500, Nfolds = 3, manual_lambda = .1, cross_validation = FALSE)
print.affinity_matrix(res)
print.diagonal(res)
print.test(res)
print.saliency(res)
print.CV(res)
print.correlations(res)
print.affinity.matrix(res)
print.diagonal(res)
print.test(res)
print.saliency(res)
document()
print.saliency(res)
print.saliency(res)
document()
print.saliency(res)
print.CV(res)
print.correlations(res)
document()
# Main estimation
res = estimate.affinity.matrix.lowrank(X, Y, w = w, tol_level = 1e-02, nB = 500, Nfolds = 3)
# Summarize results
print.affinity.matrix(res)
print.diagonal(res)
print.test(res)
print.saliency(res)
print.CV(res)
print.correlations(res)
# Main estimation
res = estimate.affinity.matrix.lowrank(X, Y, w = w, tol_level = 1e-02, nB = 500, Nfolds = 3)
# Summarize results
print.affinity.matrix(res)
print.diagonal(res)
print.test(res)
print.saliency(res)
print.CV(res)
print.correlations(res)
res = estimate.affinity.matrix.lowrank(X, Y, w = w, tol_level = 1e-02, nB = 500, Nfolds = 3, tau = .5)
# Summarize results
print.affinity.matrix(res)
print.diagonal(res)
print.test(res)
print.saliency(res)
print.CV(res)
print.correlations(res)
res = estimate.affinity.matrix.lowrank(X, Y, w = w, tol_level = 1e-02, nB = 500, Nfolds = 3, tau = .1)
# Summarize results
print.affinity.matrix(res)
print.diagonal(res)
print.test(res)
print.saliency(res)
print.CV(res)
print.correlations(res)
res = estimate.affinity.matrix.lowrank(X, Y, w = w, tol_level = 1e-03, nB = 500, Nfolds = 3)
# Summarize results
print.affinity.matrix(res)
print.diagonal(res)
print.test(res)
print.saliency(res)
print.CV(res)
print.correlations(res)
N
w_b = sort(runif(N-1)); w_b = c(w_b,1) - c(0,w_b)
w_b
sum(w_b)
document()
# Main estimation
res = estimate.affinity.matrix.lowrank(X, Y, w = w, tol_level = 1e-03, nB = 500, Nfolds = 3)
document()
# Main estimation
res = estimate.affinity.matrix.lowrank(X, Y, w = w, tol_level = 1e-03, nB = 500, Nfolds = 3)
document()
# Main estimation
res = estimate.affinity.matrix.lowrank(X, Y, w = w, tol_level = 1e-03, nB = 500, Nfolds = 3)
# Size of the problem
Kx = 4; Ky = 5; N = 500
# Generate data
mu = rep(0, Kx+Ky)
Sigma = matrix(runif((Kx+Ky)^2, min=-.2, max=.2), nrow=Kx+Ky)
Sigma = t(Sigma)%*%Sigma; diag(Sigma) = 1
data = MASS::mvrnorm(N, mu, Sigma)
X = data[,1:Kx]; Y = data[,Kx+1:Ky] # men's and women's sample data
w = sort(runif(N-1)); w = c(w,1) - c(0,w) # sample weights
# Main estimation
res = estimate.affinity.matrix.lowrank(X, Y, w = w, tol_level = 1e-03, nB = 500, Nfolds = 3)
# Size of the problem
Kx = 4; Ky = 5; N = 500
# Generate data
mu = rep(0, Kx+Ky)
Sigma = matrix(runif((Kx+Ky)^2, min=-.2, max=.2), nrow=Kx+Ky)
Sigma = t(Sigma)%*%Sigma; diag(Sigma) = 1
data = MASS::mvrnorm(N, mu, Sigma)
X = data[,1:Kx]; Y = data[,Kx+1:Ky] # men's and women's sample data
w = sort(runif(N-1)); w = c(w,1) - c(0,w) # sample weights
# Main estimation
res = estimate.affinity.matrix.lowrank(X, Y, w = w, tol_level = 1e-03, nB = 500, Nfolds = 3)
# Summarize results
print.affinity.matrix(res)
print.diagonal(res)
print.test(res)
print.saliency(res)
print.CV(res)
print.correlations(res)
res$U
res$V
res$lambda
document()
print.saliency(res)
# Directories
dropbox_path = "C:/Users/u0129287/Dropbox/Coworking"
# Sample name
sample = 1
# What to do?
load_results = TRUE
low_rank = FALSE
#######################################################
############ DO NOT CHANGE BELOW THIS LINE ############
#######################################################
setwd(paste0(dropbox_path,"/Childrolewave2/Code/R"))
# Call packages
library(ggplot2)
library(ggrepel)
library(expm)
library(Hmisc)
library(MASS)
# Import code
source("DupuyGalichon.R") # tools to estimate Dupuy and Galichon's model
source("DupuyGalichonSun.R") # tools to estimate DG's model with rank restriction
source("Descriptive.R") # utilities to export and plot findings
# Import data
X = read.csv(paste0(dropbox_path,"/Childrolewave2/Database/sample",sample,"h.csv"), header=TRUE, sep="\t")
Y = read.csv(paste0(dropbox_path,"/Childrolewave2/Database/sample",sample,"w.csv"), header=TRUE, sep="\t")
Z = read.csv(paste0(dropbox_path,"/Childrolewave2/Database/outcomes",sample,".csv"), header=TRUE, sep="\t")
X = X[order(X$hid),]; Y = Y[order(Y$hid),]; Z = Z[order(Z$hid),]
X$hid = NULL; Y$hid = NULL; Z$hid = NULL
w = rep(1,nrow(X)) # import statistical weights if necessary
# Labels
colz = names(Z)
labels_x = capitalize(names(X)); labels = gsub("_h$","",labels_x)
labels_z = capitalize(names(Z))
labels = gsub("Educ","Educ.",labels)
labels = gsub("Bmi","BMI",labels)
labels = gsub("Smoke","Smokes",labels)
labels = gsub("Sports","Likes sports",labels)
labels = gsub("Snack","Likes healthy snacks",labels)
labels = gsub("Sunscreen","Wears sunscreen",labels)
labels = gsub("Wash hands","Washes hands",labels)
labels = gsub("Health","Worries about health",labels)
labels = gsub("Helmet","Wears helmet",labels)
labels = gsub("Safari","Likes safari",labels)
labels = gsub("Fear speed","Fears speed",labels)
labels = gsub("Vacation","Likes usual holidays",labels)
labels = gsub("Extreme sports","Likes extreme sports",labels)
labels = gsub("Crossing","Careful when crossing",labels)
labels_z = gsub("_h$"," (husb)",labels_z)
labels_z = gsub("_w$"," (wife)",labels_z)
labels_z = gsub("_"," ",labels_z); labels = gsub("_", " ",labels)
labels_z = gsub("Stay at home","Stays at home",labels_z)
labels_z = gsub("Age","Age (child)",labels_z)
labels_z = gsub("Z age","Age dev.",labels_z)
labels_z = gsub("Nchildren","Num. children",labels_z)
labels_z = gsub("Z height","Height (child)",labels_z)
labels_z = gsub("Bmi","BMI (child)",labels_z)
labels_z = gsub("Yearfail","Year failed",labels_z)
labels_z = gsub("Z ita","Italian grade",labels_z)
labels_z = gsub("Z mat","Math grade",labels_z)
labels_z = gsub("Invalsiita","Italian Invalsi",labels_z)
labels_z = gsub("Invalsimat","Math Invalsi",labels_z)
labels_z = gsub("Z swellbeing","Sub. well-being (child)",labels_z)
labels_z = gsub("Z happy","Happy (child)",labels_z)
labels_z = gsub("Z patience","Patience (child)",labels_z)
labels_z = gsub("Getalongmum","Gets along with mom",labels_z)
labels_z = gsub("Getalongdad","Gets along with dad",labels_z)
labels_z = gsub("Choice2","Likes healthy snacks (child)",labels_z)
labels_x = labels
labels_y = labels
# Rescale data
X = rescale_data(X); Kx = ncol(X); N = nrow(X)
Y = rescale_data(Y); Ky = ncol(Y)
Z = rescale_data(Z); Kz = ncol(Z)
cov(cbind(X,Y))
c(cov(cbind(X,Y)))
print(c(paste0(cov(cbind(X,Y)),", ")))
print(c(paste0(floor(cov(cbind(X,Y)),4),", ")))
?floor
print(c(paste0(floor(cov(cbind(X,Y)),digits=4),", ")))
print(c(paste0(round(cov(cbind(X,Y)),digits=4),", ")))
c(paste0(round(cov(cbind(X,Y)),digits=4),", "))
prod(paste0(round(cov(cbind(X,Y)),digits=4),", "))
paste0(paste0(round(cov(cbind(X,Y)),digits=4),", "))
paste0(round(cov(cbind(X,Y)),digits=4),", ")
??concatenate
concat(paste0(round(cov(cbind(X,Y)),digits=4),", "))
paste0(round(cov(cbind(X,Y)),digits=4), collapse = ", ")
# Size of the problem
Kx = 4; Ky = 4; N = 500
# Generate data
mu = rep(0, Kx+Ky)
Sigma = matrix(c(1, 0.326, 0.1446, -0.0668, 0.5712, 0.4277, 0.1847, -0.2883, 0.326, 1, -0.0372, 0.0215, 0.2795, 0.8471, 0.1211, -0.0902, 0.1446, -0.0372, 1, -0.0244, 0.2186, 0.0636, 0.1489, -0.1301, -0.0668, 0.0215, -0.0244, 1, 0.0192, 0.0452, -0.0553, 0.2717, 0.5712, 0.2795, 0.2186, 0.0192, 1, 0.3309, 0.1324, -0.1896, 0.4277, 0.8471, 0.0636, 0.0452, 0.3309, 1, 0.0915, -0.1299, 0.1847, 0.1211, 0.1489, -0.0553, 0.1324, 0.0915, 1, -0.1959, -0.2883, -0.0902, -0.1301, 0.2717, -0.1896, -0.1299, -0.1959, 1),
nrow=Kx+Ky)
data = MASS::mvrnorm(N, mu, Sigma)
X = data[,1:Kx]; Y = data[,Kx+1:Ky] # men's and women's sample data
w = sort(runif(N-1)); w = c(w,1) - c(0,w) # sample weights
# Main estimation
res = estimate.affinity.matrix(X, Y, w = w, tol_level = 1e-02, nB = 500)
# Size of the problem
Kx = 4; Ky = 4; N = 500
# Generate data
mu = rep(0, Kx+Ky)
Sigma = matrix(c(1, 0.326, 0.1446, -0.0668, 0.5712, 0.4277, 0.1847, -0.2883, 0.326, 1, -0.0372, 0.0215, 0.2795, 0.8471, 0.1211, -0.0902, 0.1446, -0.0372, 1, -0.0244, 0.2186, 0.0636, 0.1489, -0.1301, -0.0668, 0.0215, -0.0244, 1, 0.0192, 0.0452, -0.0553, 0.2717, 0.5712, 0.2795, 0.2186, 0.0192, 1, 0.3309, 0.1324, -0.1896, 0.4277, 0.8471, 0.0636, 0.0452, 0.3309, 1, 0.0915, -0.1299, 0.1847, 0.1211, 0.1489, -0.0553, 0.1324, 0.0915, 1, -0.1959, -0.2883, -0.0902, -0.1301, 0.2717, -0.1896, -0.1299, -0.1959, 1),
nrow=Kx+Ky)
data = MASS::mvrnorm(N, mu, Sigma)
X = data[,1:Kx]; Y = data[,Kx+1:Ky] # men's and women's sample data
w = sort(runif(N-1)); w = c(w,1) - c(0,w) # sample weights
# Main estimation
res = estimate.affinity.matrix(X, Y, w = w, nB = 500)
res$Aopt
# Summarize results
print.affinity.matrix(res)
print.diagonal(res)
print.test(res)
print.saliency(res)
print.correlations(res)
labels_x
# Parameters
Kx = 4; Ky = 4; # number of matching variables on both sides of the market
N = 500 # sample size
mu = rep(0, Kx+Ky) # means of the data generating process
Sigma = matrix(c(1, 0.326, 0.1446, -0.0668, 0.5712, 0.4277, 0.1847, -0.2883, 0.326, 1, -0.0372, 0.0215, 0.2795, 0.8471, 0.1211, -0.0902, 0.1446, -0.0372, 1, -0.0244, 0.2186, 0.0636, 0.1489, -0.1301, -0.0668, 0.0215, -0.0244, 1, 0.0192, 0.0452, -0.0553, 0.2717, 0.5712, 0.2795, 0.2186, 0.0192, 1, 0.3309, 0.1324, -0.1896, 0.4277, 0.8471, 0.0636, 0.0452, 0.3309, 1, 0.0915, -0.1299, 0.1847, 0.1211, 0.1489, -0.0553, 0.1324, 0.0915, 1, -0.1959, -0.2883, -0.0902, -0.1301, 0.2717, -0.1896, -0.1299, -0.1959, 1),
nrow=Kx+Ky) # (normalized) variance-covariance matrix of the data generating process
labels_x = c("Educ.", "Age", "Height", "BMI") # labels for men's matching variables
labels_y = c("Educ.", "Age", "Height", "BMI") # labels for women's matching variables
print.affinity.matrix(res, labels_x = labels_x, labels_y = labels_y)
print.diagonal(res, labels = labels_x)
print.saliency(res, labels_x = labels_x, labels_y = labels_y, ncol_x = 2, ncol_y = 2)
# Summarize results
print.affinity.matrix(res, labels_x = labels_x, labels_y = labels_y)
print.diagonal(res, labels = labels_x)
print.test(res)
print.saliency(res, labels_x = labels_x, labels_y = labels_y, ncol_x = 2, ncol_y = 2)
print.correlations(res, labels_x = labels_x, labels_y = labels_y, label_x_axis = "Husband", label_x_axis = "Wife", ndims = 2)
print.correlations(res, labels_x = labels_x, labels_y = labels_y, label_x_axis = "Husband", label_y_axis = "Wife", ndims = 2)
getwd()
# Parameters
Kx = 4; Ky = 4; # number of matching variables on both sides of the market
N = 500 # sample size
mu = rep(0, Kx+Ky) # means of the data generating process
Sigma = matrix(c(1, 0.326, 0.1446, -0.0668, 0.5712, 0.4277, 0.1847, -0.2883, 0.326, 1, -0.0372, 0.0215, 0.2795, 0.8471, 0.1211, -0.0902, 0.1446, -0.0372, 1, -0.0244, 0.2186, 0.0636, 0.1489, -0.1301, -0.0668, 0.0215, -0.0244, 1, 0.0192, 0.0452, -0.0553, 0.2717, 0.5712, 0.2795, 0.2186, 0.0192, 1, 0.3309, 0.1324, -0.1896, 0.4277, 0.8471, 0.0636, 0.0452, 0.3309, 1, 0.0915, -0.1299, 0.1847, 0.1211, 0.1489, -0.0553, 0.1324, 0.0915, 1, -0.1959, -0.2883, -0.0902, -0.1301, 0.2717, -0.1896, -0.1299, -0.1959, 1),
nrow=Kx+Ky) # (normalized) variance-covariance matrix of the data generating process
labels_x = c("Educ.", "Age", "Height", "BMI") # labels for men's matching variables
labels_y = c("Educ.", "Age", "Height", "BMI") # labels for women's matching variables
# Sample
data = MASS::mvrnorm(N, mu, Sigma) # generating sample
X = data[,1:Kx]; Y = data[,Kx+1:Ky] # men's and women's sample data
w = sort(runif(N-1)); w = c(w,1) - c(0,w) # sample weights
# Main estimation
res = estimate.affinity.matrix.lowrank(X, Y, w = w, tol_level = 1e-03, nB = 500, Nfolds = 3)
# Main estimation
res = estimate.affinity.matrix.lowrank(X, Y, w = w, tol_level = 1e-03, nB = 500, Nfolds = 3)
document()
setwd("C:\Users\u0129287\Documents\affinitymatrix")
setwd("C:/Users/u0129287/Documents/affinitymatrix")
document()
rm(list = c("gradient", "objective", "piopt", "proximal_gradient_descent", "supercov"))
document()
# Main estimation
res = estimate.affinity.matrix.lowrank(X, Y, w = w, tol_level = 1e-03, nB = 500, Nfolds = 3)
document()
res = estimate.affinity.matrix.lowrank(X, Y, w = w, tol_level = 1e-03, nB = 100, Nfolds = 3)
# Summarize results
print.affinity.matrix(res)
print.diagonal(res)
print.test(res)
print.saliency(res)
print.CV(res)
print.correlations(res)
# Summarize results
print.affinity.matrix(res, labels_x = labels_x, labels_y = labels_y)
print.diagonal(res, labels = labels_x)
print.test(res)
print.saliency(res, labels_x = labels_x, labels_y = labels_y, ncol_x = 2, ncol_y = 2)
print.CV(res)
print.correlations(res, labels_x = labels_x, labels_y = labels_y, label_x_axis = "Husband", label_y_axis = "Wife", ndims = 2)
# Directories
dropbox_path = "C:/Users/u0129287/Dropbox/Coworking/MarionEdoardoAlfred/MatchingGenderAndSexualOrientation"
sampleid = 1
load_results = T
#######################################################
############ DO NOT CHANGE BELOW THIS LINE ############
#######################################################
setwd(paste0(dropbox_path,"/Code/R"))
# Call packages
library(readstata13)
library(tidyr)
library(plyr)
library(ggplot2)
library(ggrepel)
library(directlabels)
library(gtools)
library(expm)
# Import code
source("DupuyGalichon.R") # tools to estimate Dupuy and Galichon's model
source("Descriptive.R") # utilities to export and plot findings
# Import data
X = read.dta13(paste0(dropbox_path,"/Data/HCMST/HCMST_matched_data_",sampleid,".dta"), generate.factor=T)
w = X[,"weight"]; X = subset(X, select=-weight)
X1 = X[,!grepl("_p\\b",colnames(X))]
X2 = X[,grepl("_p\\b",colnames(X))]
N = nrow(X); K1 = ncol(X1); K2 = ncol(X2); K = K1+K2
colnames(X2) = gsub("_p\\b", "", colnames(X2))
X = smartbind(X1,X2)
install.packages("quadprog")
install.packages("gtools")
# Call packages
library(readstata13)
library(tidyr)
library(plyr)
library(ggplot2)
library(ggrepel)
library(directlabels)
library(gtools)
library(expm)
# Import code
source("DupuyGalichon.R") # tools to estimate Dupuy and Galichon's model
source("Descriptive.R") # utilities to export and plot findings
# Import data
X = read.dta13(paste0(dropbox_path,"/Data/HCMST/HCMST_matched_data_",sampleid,".dta"), generate.factor=T)
w = X[,"weight"]; X = subset(X, select=-weight)
X1 = X[,!grepl("_p\\b",colnames(X))]
X2 = X[,grepl("_p\\b",colnames(X))]
N = nrow(X); K1 = ncol(X1); K2 = ncol(X2); K = K1+K2
colnames(X2) = gsub("_p\\b", "", colnames(X2))
X = smartbind(X1,X2)
# Call packages
library(readstata13)
library(tidyr)
library(plyr)
library(ggplot2)
library(ggrepel)
library(directlabels)
library(gtools)
library(expm)
install.packages("readstata13")
# Call packages
library(readstata13)
library(tidyr)
library(plyr)
library(ggplot2)
library(ggrepel)
library(directlabels)
library(gtools)
library(expm)
# Import code
source("DupuyGalichon.R") # tools to estimate Dupuy and Galichon's model
source("Descriptive.R") # utilities to export and plot findings
# Import data
X = read.dta13(paste0(dropbox_path,"/Data/HCMST/HCMST_matched_data_",sampleid,".dta"), generate.factor=T)
w = X[,"weight"]; X = subset(X, select=-weight)
X1 = X[,!grepl("_p\\b",colnames(X))]
X2 = X[,grepl("_p\\b",colnames(X))]
N = nrow(X); K1 = ncol(X1); K2 = ncol(X2); K = K1+K2
colnames(X2) = gsub("_p\\b", "", colnames(X2))
X = smartbind(X1,X2)
X
X1
X = cbind(rbind(X1[,1:4],X2), rbind(X2,X1[,1:4]))
rescale.data(X)
cov(rescale.data(X))
paste0(round(cov(rescale.data(X)),digits=4),collapse=", ")
labels
labels_1
# Labels
labels_1 = colnames(X1)
labels_2 = colnames(X2)
labels_1
# Parameters
K = 4 # number of matching variables
N = 500 # sample size
mu = rep(0, 2*K) # means of the data generating process
Sigma = matrix(c(1, -0.0992, 0.0443, -0.0246, -0.8145, 0.083, -0.0438, 0.0357, -0.0992, 1, 0.0699, -0.0043, 0.083, 0.8463, 0.0699, -0.0129, 0.0443, 0.0699, 1, -0.0434, -0.0438, 0.0699, 0.5127, -0.0383, -0.0246, -0.0043, -0.0434, 1, 0.0357, -0.0129, -0.0383, 0.6259, -0.8145, 0.083, -0.0438, 0.0357, 1, -0.0992, 0.0443, -0.0246, 0.083, 0.8463, 0.0699, -0.0129, -0.0992, 1, 0.0699, -0.0043, -0.0438, 0.0699, 0.5127, -0.0383, 0.0443, 0.0699, 1, -0.0434, 0.0357, -0.0129, -0.0383, 0.6259, -0.0246, -0.0043, -0.0434, 1),
nrow=Kx+Ky) # (normalized) variance-covariance matrix of the data generating process with a block symmetric structure
labels = c("Sex", "Age", "Educ.", "Black") # labels for matching variables
# Parameters
K = 4 # number of matching variables
N = 500 # sample size
mu = rep(0, 2*K) # means of the data generating process
Sigma = matrix(c(1, -0.0992, 0.0443, -0.0246, -0.8145, 0.083, -0.0438, 0.0357, -0.0992, 1, 0.0699, -0.0043, 0.083, 0.8463, 0.0699, -0.0129, 0.0443, 0.0699, 1, -0.0434, -0.0438, 0.0699, 0.5127, -0.0383, -0.0246, -0.0043, -0.0434, 1, 0.0357, -0.0129, -0.0383, 0.6259, -0.8145, 0.083, -0.0438, 0.0357, 1, -0.0992, 0.0443, -0.0246, 0.083, 0.8463, 0.0699, -0.0129, -0.0992, 1, 0.0699, -0.0043, -0.0438, 0.0699, 0.5127, -0.0383, 0.0443, 0.0699, 1, -0.0434, 0.0357, -0.0129, -0.0383, 0.6259, -0.0246, -0.0043, -0.0434, 1),
nrow=Kx+Ky) # (normalized) variance-covariance matrix of the data generating process with a block symmetric structure
labels = c("Sex", "Age", "Educ.", "Black") # labels for matching variables
# Sample
data = MASS::mvrnorm(N, mu, Sigma) # generating sample
X = data[,1:K]; Y = data[,K+1:K] # men's and women's sample data
w = sort(runif(N-1)); w = c(w,1) - c(0,w) # sample weights
# Main estimation
res = estimate.affinity.matrix.unipartite(X, Y, w = w, tol_level = 1e-03, nB = 100, Nfolds = 3)
res = estimate.affinity.matrix.unipartite(X, Y, w = w, nB = 500)
document()
setwd("C:/Users/u0129287/Documents/affinitymatrix")
document()
rm(list = c("gradient", "objective", "piopt", "supercov"))
document()
# Parameters
K = 4 # number of matching variables
N = 500 # sample size
mu = rep(0, 2*K) # means of the data generating process
Sigma = matrix(c(1, -0.0992, 0.0443, -0.0246, -0.8145, 0.083, -0.0438, 0.0357, -0.0992, 1, 0.0699, -0.0043, 0.083, 0.8463, 0.0699, -0.0129, 0.0443, 0.0699, 1, -0.0434, -0.0438, 0.0699, 0.5127, -0.0383, -0.0246, -0.0043, -0.0434, 1, 0.0357, -0.0129, -0.0383, 0.6259, -0.8145, 0.083, -0.0438, 0.0357, 1, -0.0992, 0.0443, -0.0246, 0.083, 0.8463, 0.0699, -0.0129, -0.0992, 1, 0.0699, -0.0043, -0.0438, 0.0699, 0.5127, -0.0383, 0.0443, 0.0699, 1, -0.0434, 0.0357, -0.0129, -0.0383, 0.6259, -0.0246, -0.0043, -0.0434, 1),
nrow=Kx+Ky) # (normalized) variance-covariance matrix of the data generating process with a block symmetric structure
labels = c("Sex", "Age", "Educ.", "Black") # labels for matching variables
# Sample
data = MASS::mvrnorm(N, mu, Sigma) # generating sample
X = data[,1:K]; Y = data[,K+1:K] # men's and women's sample data
w = sort(runif(N-1)); w = c(w,1) - c(0,w) # sample weights
# Main estimation
res = estimate.affinity.matrix.unipartite(X, Y, w = w, nB = 500)
# Summarize results
print.affinity.matrix(res, labels_x = labels_x, labels_y = labels_y)
print.diagonal(res, labels = labels_x)
print.test(res)
print.saliency(res, labels_x = labels_x, labels_y = labels_y, ncol_x = 2, ncol_y = 2)
print.CV(res)
# Summarize results
print.affinity.matrix(res, labels_x = labels, labels_y = labels)
print.diagonal(res, labels = labels_x)
print.test(res)
print.saliency(res, labels_x = labels, labels_y = labels, ncol_x = 2, ncol_y = 2)
print.correlations(res, labels_x = labels, labels_y = labels, label_x_axis = "First partner", label_y_axis = "Second partner", ndims = 2)
# Summarize results
print.affinity.matrix(res, labels_x = labels, labels_y = labels)
print.diagonal(res, labels = labels)
print.test(res)
print.saliency(res, labels_x = labels, labels_y = labels, ncol_x = 2, ncol_y = 2)
print.correlations(res, labels_x = labels, labels_y = labels, label_x_axis = "First partner", label_y_axis = "Second partner", ndims = 2)
?estimate.affinity.matrix
document()
?estimate.affinity.matrix
source('~/affinitymatrix/R/DupuyGalichonSun.R', echo=TRUE)
source('~/affinitymatrix/R/DupuyGalichonSun.R', echo=TRUE)
document()
rm(list = c("estimate.affinity.matrix.lowrank", "proximal_gradient_descent"))
document()
document()
?estimate.affinity.matrix
document()
?estimate.affinity.matrix.unipartite
?expm
?estimate.affinity.matrix.lowrank
?estimate.affinity.matrix
document()
?estimate.affinity.matrix
?estimate.affinity.matrix.lowrank
?estimate.affinity.matrix.unipartite
use_gpl_license()
roxygen2::use_gpl_license()
library(roxygen2)
use_gpl_license()
usethis::use_gpl_license()
?use_gpl3_license()
use_gpl3_license()
use_gpl3_license("Edoardo Ciscato")
install.packages("whisker")
use_gpl3_license("Edoardo Ciscato")
usethis::use_testthat()
usethis::use_test()
devtools::test()
devtools::test()
devtools::test()
file.exists("~/.ssh/id_rsa.pub")
setwd()
setwd("..")
getwd()
file.exists("~/.ssh/id_rsa.pub")
file.exists("~/.ssh/id_rsa.pub")
setwd("..")
file.exists("~/.ssh/id_rsa.pub")
setwd("C:/Users/u0129287/Documents/affinitymatrix")
use_readme_rmd()
install.packages("rmarkdown")
use_readme_rmd()
libray(usethis)
library(usethis)
use_readme_rmd()
library(rmarkdown)
install.packages("evaluate")
library(rmarkdown)
use_readme_rmd()
?install_github
devtools::install_github("edoardociscato/affinitymatrix")
getwd()
